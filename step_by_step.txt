# create folder for the solution
mkdir skinet
cd skinet

# create solution file
dotnet new sln

# create API project
dotnet new webapi -o API -controllers

# create classlib project fore Core
dotnet new classlib -o Core

# create classlib project fore Infrastructure
dotnet new classlib -o Infrastructure

# add projects to the solution
dotnet sln add API
dotnet sln add Core
dotnet sln add Infrastructure

# add dependencies      (API -> Core -> Infrastructure)
cd API
dotnet add reference ../Infrastructure
cd ../Infrastructure
dotnet add reference ../Core
cd ..

# check that all good set
dotnet restore
dotnet build

# create Etities folder inside Core
# cretate Product class inside Entities
# create properties in Product classlib
prop -> enter

        public int Id { get; set; }
        public required string Name { get; set; }
        public required string Desctiption { get; set; }
        public decimal Price { get; set; }
        public required string PictureUrl { get; set; }
        public required string Type { get; set; }
        public required string Brand { get; set; }
        public int QuantityInStock { get; set; }


# add BaseEntity to Entities with only one Id property

# derive Product from BaseEntity and remove Id from Product

# In nuget install microsoft.entityframework
sqlServer to Infrastructure
Design to API

# in Infrastructure create folder Data
# inside Data create class StoreContext
# with code actions generate constructor StoreContext(options)
# with code actions -> use primary constructor

# add dbContext to services in Programm

# add dbSet of Products in StoreContext

# run Docker
# create file docker-compose.yml in the root dir
# run container
> docker compose up -d

# Add connection string to appsettings.Dev...json

# install dotnet-ef
dotnet tool install --global dotnet-ef --version 8.0.8

# stop API if running

# Create configuration for Product
Infrastructure -> Config -> ProductConfiguration.cs

# apply config in StoreContext
modelBuilder.ApplyConfigurationsFromAssembly(typeof(ProductConfiguration).Assembly);

# create migration
> dotnet ef migrations add InitialCreate -s API -p Infrastructure
# to remove use
> dotnet ef migrations remove -s API -p Infrastructure

# create database
> dotnet ef database update -s API -p Infrastructure

# in API add ProductController

# in Postman create workspace -> new collection -> new request
# For creation postman request look at example CourseAssets\postman\SkiNet.postman_collection.json

# initialize git

#### Repository ###
# in Core -> interfaces -> IProductRepository.cs
# Infrastructure -> Data -> ProductRepository.cs

# Add repository to the services in Programm.cs

# remove StoreContext injection from ProductsController if exists
# add IProductRepository injection instead

# Seeding
# Add seed data to Infrastructure -> Data -> SeedData
# Add StoreContextSeed class to Infrastructure -> Data
# In Programm add seeding code
# drom database if needed
# rerun app and see if DB has been created
